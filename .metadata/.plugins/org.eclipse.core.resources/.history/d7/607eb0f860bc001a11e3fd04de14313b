package com.javafsfeb.airlinereservationwithjdbc.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;

import com.javafsfeb.airlinereservationwithjdbc.dto.BookReservationInfoBean;
import com.javafsfeb.airlinereservationwithjdbc.dto.FlightDetailsInfoBean;
import com.javafsfeb.airlinereservationwithjdbc.dto.RegistrationIfoBean;
import com.javafsfeb.airlinereservationwithjdbc.exception.AirlineException;
import com.javafsfeb.airlinereservationwithjdbc.utility.Utility;

public class UserDaoImpl implements UserDao {

	Utility jdbc=new Utility();
	Connection connection = null;
	PreparedStatement preparedstatement = null;
	ResultSet resultset = null;

	public boolean register(RegistrationIfoBean login) {
		try(Connection connection =jdbc.getConnection()){
			try (PreparedStatement preparedstatement = connection.prepareStatement(jdbc.getQuery("addUser"));){

			preparedstatement.setInt(1, login.getRegid());
			preparedstatement.setString(2, login.getName());
			preparedstatement.setLong(3, login.getMobilenumber());
			preparedstatement.setString(4, login.getEmailId());
			preparedstatement.setString(5, login.getPassword());
			preparedstatement.setString(6, login.getRole());

			int count = preparedstatement.executeUpdate();
			if ((login.getEmailId().isEmpty()) && (count == 0)) {
				return false;
			} else {
				return true;
			}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	public RegistrationIfoBean authentication(String email, String password) {

		try(Connection connection =jdbc.getConnection()){
			try(PreparedStatement preparedstatement = connection
					.prepareStatement(jdbc.getQuery("loginCheck"));){

			preparedstatement.setString(1, email);
			preparedstatement.setString(2, password);
			resultset = preparedstatement.executeQuery();
			if (resultset.next()) {
				RegistrationIfoBean bean = new RegistrationIfoBean();

				bean.setEmailId(resultset.getString("emailId"));
				bean.setPassword(resultset.getString("password"));

				return bean;
			} else {
				return null;
			}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	public FlightDetailsInfoBean booking(String source, String destination) {
    
		try(Connection connection =jdbc.getConnection()){
		try(PreparedStatement preparedstatement = connection
				.prepareStatement(jdbc.getQuery("searchFlightBySourceandDestination"));
) {
			FileInputStream fileinput = new FileInputStream("connectioninfo.properties");
			Properties prop = new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(prop.getProperty("dburl"), prop);
			preparedstatement = connection
					.prepareStatement(jdbc.getQuery("searchFlightBySourceandDestination"));

			preparedstatement.setString(1, source);
			preparedstatement.setString(2, destination);
			resultset = preparedstatement.executeQuery();
			if (resultset.next()) {
				FlightDetailsInfoBean bean = new FlightDetailsInfoBean();
				bean.setFlightcode(resultset.getInt("fcode"));
				bean.setFlightname(resultset.getString("flightname"));
				bean.setSource(resultset.getString("source"));
				bean.setDestination(resultset.getString("destination"));
				bean.setArrival_time(resultset.getTime("arrivaltime").toLocalTime());
				bean.setDeparture_time(resultset.getTime("departuretime").toLocalTime());
				bean.setArrivalDate(resultset.getDate("arrivadate").toLocalDate());
				bean.setDeparturedate(resultset.getDate("departuredate").toLocalDate());

				return bean;
			} else {
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	public List<FlightDetailsInfoBean> getFlightDetails() {

		try {
			List<FlightDetailsInfoBean> list = new LinkedList<FlightDetailsInfoBean>();

			FileInputStream fileinput = new FileInputStream("connectioninfo.properties");
			Properties prop = new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(prop.getProperty("dburl"), prop);
			preparedstatement = connection.prepareStatement(jdbc.getQuery("getAllFlightDetails"));

			resultset = preparedstatement.executeQuery();
			FlightDetailsInfoBean bean = new FlightDetailsInfoBean();
			while (resultset.next()) {
				bean.setFlightcode(resultset.getInt("fcode"));
				bean.setFlightname(resultset.getString("flightname"));
				bean.setSource(resultset.getString("source"));
				bean.setDestination(resultset.getString("destination"));
				bean.setArrival_time(resultset.getTime("arrivaltime").toLocalTime());
				bean.setDeparture_time(resultset.getTime("departuretime").toLocalTime());
				bean.setArrivalDate(resultset.getDate("arrivadate").toLocalDate());
				bean.setDeparturedate(resultset.getDate("departuredate").toLocalDate());
				list.add(bean);

			}

			return list;

		} catch (Exception e) {

		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (preparedstatement != null) {
					preparedstatement.close();
				}

			} catch (Exception e) {

			}

		}
		return null;
	}

	public FlightDetailsInfoBean searchFlightByDestination(String destination) {

		FlightDetailsInfoBean bean = new FlightDetailsInfoBean();
		try {

			FileInputStream fileinput = new FileInputStream("connectioninfo.properties");
			Properties prop = new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(prop.getProperty("dburl"), prop);
			preparedstatement = connection.prepareStatement(jdbc.getQuery("serachFlightByDestination"));

			preparedstatement.setString(1, destination);
			resultset = preparedstatement.executeQuery();
			if (resultset.next()) {
				bean.setFlightcode(resultset.getInt("fcode"));
				bean.setFlightname(resultset.getString("flightname"));
				bean.setSource(resultset.getString("source"));
				bean.setDestination(resultset.getString("destination"));
				bean.setArrival_time(resultset.getTime("arrivaltime").toLocalTime());
				bean.setDeparture_time(resultset.getTime("departuretime").toLocalTime());
				bean.setArrivalDate(resultset.getDate("arrivadate").toLocalDate());
				bean.setDeparturedate(resultset.getDate("departuredate").toLocalDate());

			} else {
				System.out.println("not found");
			}
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (preparedstatement != null) {
					preparedstatement.close();
				}
				if (resultset != null) {
					resultset.close();
				}
			} catch (Exception e) {
				System.out.println(e);
			}

		}
		return bean;
	}// end of retriving method

	public boolean cancellation(int personid) {

		BookReservationInfoBean bean = new BookReservationInfoBean();
		try {
			FileInputStream fileinput = new FileInputStream("connectioninfo.properties");
			Properties prop = new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(prop.getProperty("dburl"), prop);
			preparedstatement = connection.prepareStatement(jdbc.getQuery("cancellation"));

			preparedstatement.setInt(1, personid);
			int results = preparedstatement.executeUpdate();

		} catch (Exception e) {
			System.out.println(e);
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (preparedstatement != null) {
					preparedstatement.close();
				}

			} catch (Exception e) {

			}

		}
		return true;
	}

	int results = 0;

	public BookReservationInfoBean ticket(RegistrationIfoBean userBean, FlightDetailsInfoBean flightBean) {
		try {
			FileInputStream fileinput = new FileInputStream("connectioninfo.properties");
			Properties prop = new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(prop.getProperty("dburl"), prop);
			preparedstatement = connection.prepareStatement("insert into reservations values(?,?,?,?,?)");
			BookReservationInfoBean bean = new BookReservationInfoBean();
			preparedstatement.setInt(1, userBean.getRegid());
			preparedstatement.setInt(2, flightBean.getFlightcode());
			preparedstatement.setInt(3, bean.getNoofseats());
			preparedstatement.setString(4, bean.getPassportno());
			preparedstatement.setString(5, bean.getVisano());

			results = preparedstatement.executeUpdate();

		} catch (Exception e) {

		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (preparedstatement != null) {
					preparedstatement.close();
				}

			} catch (Exception e) {

			}

		}
		return null;

	}

	public FlightDetailsInfoBean searchFlightBySource(String source) {

		Connection connection = null;
		PreparedStatement preparedstatement = null;
		ResultSet resultset = null;
		FlightDetailsInfoBean bean = new FlightDetailsInfoBean();
		try {

			FileInputStream fileinput = new FileInputStream("connectioninfo.properties");
			Properties prop = new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(prop.getProperty("dburl"), prop);
			preparedstatement = connection.prepareStatement(jdbc.getQuery("searchFlightBysource"));
			preparedstatement.setString(1, source);
			resultset = preparedstatement.executeQuery();
			if (resultset.next()) {
				bean.setFlightcode(resultset.getInt("fcode"));
				bean.setFlightname(resultset.getString("flightname"));
				bean.setSource(resultset.getString("source"));
				bean.setDestination(resultset.getString("destination"));
				bean.setArrival_time(resultset.getTime("arrivaltime").toLocalTime());
				bean.setDeparture_time(resultset.getTime("departuretime").toLocalTime());
				bean.setArrivalDate(resultset.getDate("arrivadate").toLocalDate());
				bean.setDeparturedate(resultset.getDate("departuredate").toLocalDate());
			} else {
				System.out.println("not found");
			}
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (preparedstatement != null) {
					preparedstatement.close();
				}
				if (resultset != null) {
					resultset.close();
				}
			} catch (Exception e) {
				System.out.println(e);
			}

		}
		return bean;
	}// end of retriving method

	@Override
	public BookReservationInfoBean bookFlight(BookReservationInfoBean flightbooking) {
		try {

			FileInputStream fileinput = new FileInputStream("connectioninfo.properties");
			Properties prop = new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(prop.getProperty("dburl"), prop);
			preparedstatement = connection.prepareStatement(jdbc.getQuery("searchFlightByCode"));
			preparedstatement.setInt(1, flightbooking.getFlightcode());

			try (ResultSet getReqSet = preparedstatement.executeQuery();) {
				while (getReqSet.next()) {
					int bookFlightId = getReqSet.getInt("fcode");

					if (flightbooking.getFlightcode() == bookFlightId) {

						try {
							FileInputStream fileinput1 = new FileInputStream("connectioninfo.properties");
							Properties prop1 = new Properties();
							prop1.load(fileinput1);
							Class.forName(prop1.getProperty("driver")).newInstance();
							connection = DriverManager.getConnection(prop1.getProperty("dburl"), prop1);
							preparedstatement = connection.prepareStatement(jdbc.getQuery("tocheckId"));
							preparedstatement.setInt(1, flightbooking.getId());
							try (ResultSet getUser = preparedstatement.executeQuery();) {
								while (getUser.next()) {
									int user = getUser.getInt("id");

									if (flightbooking.getId() == user) {

										try {
											FileInputStream fileinput2 = new FileInputStream(
													"connectioninfo.properties");
											Properties prop2 = new Properties();
											prop2.load(fileinput2);
											Class.forName(prop2.getProperty("driver")).newInstance();
											connection = DriverManager.getConnection(prop2.getProperty("dburl"), prop2);
											preparedstatement = connection
													.prepareStatement(jdbc.getQuery("addingDetails"));
											preparedstatement.setInt(1, flightbooking.getId());
											preparedstatement.setInt(2, flightbooking.getFlightcode());
											preparedstatement.setInt(3, flightbooking.getNoofseats());
											preparedstatement.setString(4, flightbooking.getPassportno());
											preparedstatement.setString(5, flightbooking.getVisano());
											preparedstatement.executeUpdate();

											return flightbooking;

										} catch (Exception e) {
											throw new AirlineException("Can't request flight");
										}

									}
								}
							}
						} catch (Exception e) {
							throw new AirlineException(e.getMessage());
						}
					}
				}
			}
		} catch (AirlineException e) {
			throw new AirlineException(e.getMessage());
		} catch (Exception e) {
			throw new AirlineException(e.getMessage());
		}
		return null;
	}

}
