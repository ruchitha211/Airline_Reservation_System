package com.jfsfeb.airlinereservationsystem.services;

import java.util.ArrayList;
import java.util.List;

import com.jfsfeb.airlinereservationsystem.dao.UserDao;
import com.jfsfeb.airlinereservationsystem.dao.UserDaoImpl;
import com.jfsfeb.airlinereservationsystem.dto.BookReservationInfoBean;
import com.jfsfeb.airlinereservationsystem.dto.FlightDetailsInfoBean;
import com.jfsfeb.airlinereservationsystem.dto.PassengerDetailsInfoBean;
import com.jfsfeb.airlinereservationsystem.dto.UserLoginInfoBean;
import com.jfsfeb.airlinereservationsystem.exception.AirlineException;
import com.jfsfeb.airlinereservationsystem.util.Validations;

@SuppressWarnings("unused")
public class UserServiceImpl implements UserService {
	private UserDao user = new UserDaoImpl();
	Validations validation = new Validations();

	public boolean register(UserLoginInfoBean login) {
		if (validation.validatedId(login.getRegId())) {
			if (validation.validatedName(login.getUserName())) {
				if (validation.validatedMobile(login.getMobileNumber())) {
					if (validation.validatedEmail(login.getEmailId())) {
						if (validation.validatedPassword(login.getPassword())) {
							return user.register(login);
						} else {
							throw new AirlineException("password should contain length of 8");
						}
					} else {
						throw new AirlineException("email shoould be proper");
					}
				}
				throw new AirlineException("mobile number should contain 10 numbers");
			}
			throw new AirlineException("Name should contain only alphabets ");
		}
		return false;

	}

	public UserLoginInfoBean authentication(String email, String password) {
//		if (email != null && password != null) {
			if (validation.validatedEmail(email)) {
				if (validation.validatedPassword(password)) {
					return user.authentication(email, password);
				}throw new AirlineException("Entered password is incorrect");
			}throw new AirlineException("Entered email is incorrect");
//		}
//		throw new AirlineException("Enter email and password is in correct");

	}

	public List<FlightDetailsInfoBean> getFlightDetails() {

		return user.getFlightDetails();
	}

	public FlightDetailsInfoBean searchFlightBySource(String source) {

		return user.searchFlightBySource(source);
	}

	public FlightDetailsInfoBean searchFlightByDestination(String destination) {

		return user.searchFlightByDestination(destination);
	}

	public boolean cancellation(int personid) {
		if (personid != 0) {
			if (validation.validatedId(personid)) {

				return user.cancellation(personid);
			}

		}
		throw new AirlineException("person id is invalid");
	}

	public FlightDetailsInfoBean booking(String source, String destination) {

		return user.booking(source, destination);
	}

	public BookReservationInfoBean ticket(UserLoginInfoBean userBean, FlightDetailsInfoBean flightBean) {

		return user.ticket(userBean, flightBean);
	}

}
