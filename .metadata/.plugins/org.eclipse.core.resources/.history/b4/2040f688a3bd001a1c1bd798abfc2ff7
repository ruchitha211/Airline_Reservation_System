package com.javafsfeb.airlinereservationsystemwithspring.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.javafsfeb.airlinereservationsystemwithspring.dto.AirlineResponce;
import com.javafsfeb.airlinereservationsystemwithspring.dto.FlightDetailsInfoBean;
import com.javafsfeb.airlinereservationsystemwithspring.dto.RegistrationIfoBean;
import com.javafsfeb.airlinereservationsystemwithspring.services.AdminService;

@RestController
public class AdminController {
	
	@Autowired
  private AdminService adminService;
	
	
	@PostMapping(path = "/addUser", 
			consumes= {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE},
			produces= {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
	public AirlineResponce registration(@RequestBody RegistrationIfoBean login) {
		boolean isAdded = adminService.register(login);

		AirlineResponce response = new AirlineResponce();
		if(isAdded) {
			response.setMessage("Record is inserted Successfully");
			
		} else {
			response.setError(true);
			response.setMessage("Record is not inserted");
		}
		return response;
	}
	
	
	@PostMapping(path = "/login", 
			consumes= {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE},
			produces= {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
	public AirlineResponce authentication(@RequestBody RegistrationIfoBean login) {
		RegistrationIfoBean userLogin = adminService.authentication(login.getEmailId(), login.getPassword());
		AirlineResponce response = new AirlineResponce();
		if (userLogin != null) {
			response.setMessage("Login succesfull");
			response.setUserinfo(userLogin);;
			response.setRole(userLogin.getRole());
			
		} else {
			response.setError(true);
			response.setMessage("Invalid credentials,Please try again");
		}
		return response;
	}


	@PostMapping(path="/addFlight",
			consumes= {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},
			produces= {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	public AirlineResponce addFlight(@RequestBody FlightDetailsInfoBean flight) {
	boolean isAdded=adminService.addFlight(flight);
	AirlineResponce responce= new AirlineResponce();
	if(isAdded) {
		responce.setMessage("Flight Added Sucessfully....");
		
	}else {
		responce.setError(true);
		responce.setMessage("unable to add flight details");
	}
	return responce;
	}
	
	@GetMapping(path="/searchBySource/{sorce}",
			produces= MediaType.APPLICATION_JSON_VALUE)
	public AirlineResponce searchFlightBySource(@PathVariable(name="source") String source) {
		FlightDetailsInfoBean flightBySource=adminService.searchFlightBySource(source);
		AirlineResponce responce= new AirlineResponce();
		if(flightBySource!=null) {
			responce.setMessage("Flights are Avaliable....");
			responce.setFlightDetails(flightBySource);
		}else {
			responce.setError(true);
		}
		return responce;
	}

	@GetMapping(path="/searchByDestinaton/{destination}",
			produces= MediaType.APPLICATION_JSON_VALUE)
	public AirlineResponce searchFlightByDestination(@PathVariable(name="destination") String destination) {
		FlightDetailsInfoBean flightByDestination=adminService.searchFlightByDestination(destination);
		AirlineResponce responce= new AirlineResponce();
		if(flightByDestination!=null) {
			responce.setMessage("Flights are Avaliable....");
			responce.setFlightDetails(flightByDestination);
		}else {
			responce.setError(true);
		}
		return responce;
	}

	
	@GetMapping(path="/searchByCode/{code}",
			produces= MediaType.APPLICATION_JSON_VALUE)
	public AirlineResponce searchFlightByCode(@PathVariable(name="code") String code) {
		FlightDetailsInfoBean flightByCode=adminService.searchFlightBycode(code);
		AirlineResponce responce= new AirlineResponce();
		if(flightByCode!=null) {
			responce.setMessage("Flights are Avaliable....");
			responce.setFlightDetails(flightByCode);
		}else {
			responce.setError(true);
		}
		return responce;
	}

	@DeleteMapping(path="/deleteFlight/{delete}",
			produces = {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
	public AirlineResponce removeFlight(@PathVariable(name="delete") int flightcode) {
		boolean isDeleted = adminService.removeFlight(flightcode);
		AirlineResponce response = new AirlineResponce();
		if(isDeleted) {
			response.setMessage("Flight Record deleted");
		} else {
			response.setError(true);
			response.setMessage("Flight Record not deleted");
		}
		return response;		
	}
	
	@GetMapping(path="/getAllFlightDetails",
			produces = {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
	public AirlineResponce getBooksInfo() {
		List<FlightDetailsInfoBean> recordList = adminService.getFlightDetails();
		AirlineResponce response = new AirlineResponce();
		
		if(recordList != null && !recordList.isEmpty()) {
			response.setFlightDetailsInfo(recordList);;
		} else {
			response.setError(true);
			response.setMessage("Book with given Author not present");
		}
		return response;
	}









}//End of class




