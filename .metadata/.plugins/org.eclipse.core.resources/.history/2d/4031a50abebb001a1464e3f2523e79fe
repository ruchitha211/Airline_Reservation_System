package com.javafsfeb.airlinereservationwithjdbc.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;

import com.javafsfeb.airlinereservationwithjdbc.dto.BookReservationInfoBean;
import com.javafsfeb.airlinereservationwithjdbc.dto.FlightDetailsInfoBean;
import com.javafsfeb.airlinereservationwithjdbc.dto.RegistrationIfoBean;



public class UserDaoImpl implements UserDao {
	
	Connection connection = null;
	PreparedStatement preparedstatement = null;
	ResultSet resultset=null;

	public boolean register(RegistrationIfoBean login) {
		try {
			
			FileInputStream fileinput= new FileInputStream("connectioninfo.properties");
			Properties prop=new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection=DriverManager.getConnection(prop.getProperty("dburl"),prop);
			preparedstatement= connection.prepareStatement("insert into registration values(?,?,?,?,?,?)");	
			
			preparedstatement.setInt(1, login.getRegid());
			preparedstatement.setString(2, login.getName());
			preparedstatement.setLong(3, login.getMobilenumber());
			preparedstatement.setString(4, login.getEmailId());
			preparedstatement.setString(5, login.getPassword());
			preparedstatement.setString(6, login.getRole());
			
			int count = preparedstatement.executeUpdate();
			if ((login.getEmailId().isEmpty()) && (count == 0)) {
				return false;
			} else {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}


	public RegistrationIfoBean authentication(String email, String password) {
	
		try {
			
			FileInputStream fileinput= new FileInputStream("connectioninfo.properties");
			Properties prop=new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection=DriverManager.getConnection(prop.getProperty("dburl"),prop);
			preparedstatement= connection.prepareStatement("select * from registration where emailId=? and password=?  ");

			preparedstatement.setString(1, email);
			preparedstatement.setString(2, password);
			resultset = preparedstatement.executeQuery();
			if (resultset.next()) {
				RegistrationIfoBean bean = new RegistrationIfoBean();
		
				bean.setEmailId(resultset.getString("emailId"));
				bean.setPassword(resultset.getString("password"));
				
				return bean;
			} else {
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}


	public FlightDetailsInfoBean booking(String source, String destination) {
		
		try {
			FileInputStream fileinput= new FileInputStream("connectioninfo.properties");
			Properties prop=new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection=DriverManager.getConnection(prop.getProperty("dburl"),prop);
			preparedstatement= connection.prepareStatement("select * from flightdetails where source=? and destination=?");
			
			preparedstatement.setString(1, source);
			preparedstatement.setString(2, destination);
			resultset = preparedstatement.executeQuery();
			if (resultset.next()) {
				FlightDetailsInfoBean bean = new FlightDetailsInfoBean();
				bean.setFlightcode(resultset.getInt("fcode"));
		        bean.setFlightname(resultset.getString("flightname"));
				bean.setSource(resultset.getString("source"));
				bean.setDestination(resultset.getString("destination"));
				bean.setArrival_time(resultset.getTime("arrivaltime").toLocalTime());
				bean.setDeparture_time(resultset.getTime("departuretime").toLocalTime());
				bean.setArrivalDate(resultset.getDate("arrivadate").toLocalDate());
				bean.setDeparturedate(resultset.getDate("departuredate").toLocalDate());
				
				return bean;
			} else {
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	public List<FlightDetailsInfoBean> getFlightDetails() {
		
		try {
			List<FlightDetailsInfoBean> list = new LinkedList<FlightDetailsInfoBean>();
			
			FileInputStream fileinput= new FileInputStream("connectioninfo.properties");
			Properties prop=new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection=DriverManager.getConnection(prop.getProperty("dburl"),prop);
			preparedstatement= connection.prepareStatement("select * from flightdetails");	

			
			 resultset = preparedstatement.executeQuery();
			 FlightDetailsInfoBean bean = new FlightDetailsInfoBean();
			 while (resultset.next()) {
				   bean.setFlightcode(resultset.getInt("fcode"));
					bean.setFlightname(resultset.getString("flightname"));
					bean.setSource(resultset.getString("source"));
					bean.setDestination(resultset.getString("destination"));
					bean.setArrival_time(resultset.getTime("arrivaltime").toLocalTime());
					bean.setDeparture_time(resultset.getTime("departuretime").toLocalTime());
					bean.setArrivalDate(resultset.getDate("arrivadate").toLocalDate());
					bean.setDeparturedate(resultset.getDate("departuredate").toLocalDate());
				   list.add(bean);
					
					
				}
			 
			 return list;
				
		} catch (Exception e) {
				
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (preparedstatement != null) {
					preparedstatement.close();
				}
				
				} catch (Exception e) {
					
				}

		}
			return null;
	}

		

	public FlightDetailsInfoBean searchFlightByDestination(String destination) {
	
		FlightDetailsInfoBean bean = new FlightDetailsInfoBean();
			try {
				
				FileInputStream fileinput= new FileInputStream("connectioninfo.properties");
				Properties prop=new Properties();
				prop.load(fileinput);
				Class.forName(prop.getProperty("driver")).newInstance();
				connection= DriverManager.getConnection(prop.getProperty("dburl"),prop);
				preparedstatement=connection.prepareStatement("select * from  flightdetails where destination=?");	

				preparedstatement.setString(1, destination);
				resultset = preparedstatement.executeQuery();
					if (resultset.next()) {
						bean.setFlightcode(resultset.getInt("fcode"));
						bean.setFlightname(resultset.getString("flightname"));
						bean.setSource(resultset.getString("source"));
						bean.setDestination(resultset.getString("destination"));
						bean.setArrival_time(resultset.getTime("arrivaltime").toLocalTime());
						bean.setDeparture_time(resultset.getTime("departuretime").toLocalTime());
						bean.setArrivalDate(resultset.getDate("arrivadate").toLocalDate());
						bean.setDeparturedate(resultset.getDate("departuredate").toLocalDate());
						
					} else {
					System.out.println("not found");
					}
			} catch (Exception e) {
					System.out.println(e);
			} finally {
				try {
					if (connection != null) {
						connection.close();
					}
					if (preparedstatement != null) {
						preparedstatement.close();
					}
					if (resultset != null) {
						resultset.close();
					}
					} catch (Exception e) {
						System.out.println(e);
					}

			}
				return bean;
		}//end of retriving method

	public boolean cancellation(int personid) {
		
		BookReservationInfoBean bean = new BookReservationInfoBean();
		try {
			FileInputStream fileinput= new FileInputStream("connectioninfo.properties");
			Properties prop=new Properties();
			prop.load(fileinput);
			Class.forName(prop.getProperty("driver")).newInstance();
			connection=DriverManager.getConnection(prop.getProperty("dburl"),prop);
			preparedstatement=connection.prepareStatement("delete from  reservation where id=?");	

			preparedstatement.setInt(1, personid);
			 int results = preparedstatement.executeUpdate();
				
		} catch (Exception e) {
				System.out.println(e);
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (preparedstatement != null) {
					preparedstatement.close();
				}
				
				} catch (Exception e) {
				
				}

		}
			return true;
	}

	int results = 0;
	public BookReservationInfoBean ticket(RegistrationIfoBean userBean, FlightDetailsInfoBean flightBean) {
		try {
		FileInputStream fileinput= new FileInputStream("connectioninfo.properties");
		Properties prop=new Properties();
		prop.load(fileinput);
		Class.forName(prop.getProperty("driver")).newInstance();
		connection= DriverManager.getConnection(prop.getProperty("dburl"),prop);
		preparedstatement= connection.prepareStatement("insert into reservations values(?,?,?,?,?)");
		BookReservationInfoBean bean=new BookReservationInfoBean();
		preparedstatement.setInt(1, userBean.getRegid());
		preparedstatement.setInt(2, flightBean.getFlightcode());
		preparedstatement.setInt(3, bean.getNoofseats());
		preparedstatement.setString(4, bean.getPassportno());
		preparedstatement.setString(5, bean.getVisano());
	
		
		results = preparedstatement.executeUpdate();

		} catch (Exception e) {

		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (preparedstatement != null) {
					preparedstatement.close();
				}

			} catch (Exception e) {

			}

		}
		return null;
		

}


	public FlightDetailsInfoBean searchFlightBySource(String source) {

		Connection connection = null;
		PreparedStatement preparedstatement = null;
		ResultSet resultset = null;
		FlightDetailsInfoBean bean = new FlightDetailsInfoBean();
			try {
				
				FileInputStream fileinput= new FileInputStream("connectioninfo.properties");
				Properties prop=new Properties();
				prop.load(fileinput);
				Class.forName(prop.getProperty("driver")).newInstance();
				connection=DriverManager.getConnection(prop.getProperty("dburl"),prop);
				preparedstatement= connection.prepareStatement("select * from  flightdetails where source=?");	
				preparedstatement.setString(1, source);
				resultset = preparedstatement.executeQuery();
					if (resultset.next()) {
						bean.setFlightcode(resultset.getInt("fcode"));
						bean.setFlightname(resultset.getString("flightname"));
						bean.setSource(resultset.getString("source"));
						bean.setDestination(resultset.getString("destination"));
						bean.setArrival_time(resultset.getTime("arrivaltime").toLocalTime());
						bean.setDeparture_time(resultset.getTime("departuretime").toLocalTime());
						bean.setArrivalDate(resultset.getDate("arrivadate").toLocalDate());
						bean.setDeparturedate(resultset.getDate("departuredate").toLocalDate());
					} else {
					System.out.println("not found");
					}
			} catch (Exception e) {
					System.out.println(e);
			} finally {
				try {
					if (connection != null) {
						connection.close();
					}
					if (preparedstatement != null) {
						preparedstatement.close();
					}
					if (resultset != null) {
						resultset.close();
					}
					} catch (Exception e) {
						System.out.println(e);
					}

			}
				return bean;
		}//end of retriving method


	
}
